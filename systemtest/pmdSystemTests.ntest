# -*-Perl-*-

# emmaSystemTests.ntest -
#
# ECPMD
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;

 
# system tests


require "$::gTestFileDir/pmd-common.ntest";


$::grunMavenCreated = 0;
$::gProjectImported = 0;
$::gtestProjectName = 'PMDTestProject';

my $outcome = "";

sub importProject() {
    assertOK($::N->import(
             { file =>"$::gTestFileDir/pmdSystemTests.xml",
               path  => "/projects/PMDTestProject",
               force => 1
             } ), "import runCommandLine");
   
    assertOK($::N->getProcedure($::gtestProjectName, 'runPMDWithRequiredOptions'),
    "runPMDWithRequiredOption procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'runPMDWithRequiredCommandsAndReport'),
    "runPMDWithRequiredCommandsAndReport procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'runPMDWithWorkingDirAndReport'),
    "runPMDWithWorkingDirAndReport procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'runPMDWithAllOptionsButWD'),
    "runPMDWithAllOptionsButWD procedure doesn't exist");
    
    $::gProjectImported = 1;
}


sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }

   
}
 
ntest "runPMDWithRequiredOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "runPMDWithRequiredOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='commandLine']/value");

      assertEq($commandLine, 'java -jar "E:/pmd-bin-4.2.5/pmd-4.2.5/lib/pmd-4.2.5.jar" "E:/emma-2.0.5312-src/emma-2.0.5312/core" text basic', 
           "command line doesn't match expected output");

  };
  
ntest "runPMDWithRequiredCommandsAndReport", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "runPMDWithRequiredCommandsAndReport",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='commandLine']/value");

      my $expectedCmdLine = 'java -jar "E:/pmd-bin-4.2.5/pmd-4.2.5/lib/pmd-4.2.5.jar" "E:/emma-2.0.5312-src/emma-2.0.5312/core" html strings,basic -reportfile "N:/runPMDWithRequiredCommandsAndReport-10-201008131102/pmdReport.html"';

      #to avoid the timestamp directory generated by the working dir
      assertEq(substr($commandLine, 0, index($commandLine, '-reportfile')), 
            substr($expectedCmdLine, 0, index($expectedCmdLine, '-reportfile')), 
           "command line doesn't match expected output");

  };
  
ntest "runPMDWithWorkingDirAndReport", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "runPMDWithWorkingDirAndReport",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='commandLine']/value");
      my $workingDir = $xpath->findvalue("//property[propertyName='workingdir']/value");

      assertEq('e:/', $workingDir, 'working dir does not match');
      assertEq($commandLine, 'java -jar "E:/pmd-bin-4.2.5/pmd-4.2.5/lib/pmd-4.2.5.jar" "E:/emma-2.0.5312-src/emma-2.0.5312/core" html basic,strings -reportfile "e://generatedPMDreport.html"', 
           "command line doesn't match expected output");

  };

ntest "runPMDWithAllOptionsButWD", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "runPMDWithAllOptionsButWD",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      
      # get the value of the commands lines
      my $commandLine = $xpath->findvalue("//property[propertyName='commandLine']/value");
      
      my $expectedCmdLine = 'C:/cygwin/usr/local/tools/i686_win32/jdk1.6.0_18/bin/java -jar "E:/pmd-bin-4.2.5/pmd-4.2.5/lib/pmd-4.2.5.jar" "E:/emma-2.0.5312-src/emma-2.0.5312/core" xml strings,jsp,jsf -reportfile "N:/runPMDWithAllOptionsButWD-6-201008131144/myfile.xml" -auxclasspath "E:/emma-2.0.5312-src/emma-2.0.5312/lib" -verbose';

      #to avoid the timestamp directory generated by the working dir
      assertEq(substr($commandLine, 0, index($commandLine, '-reportfile')), 
            substr($expectedCmdLine, 0, index($expectedCmdLine, '-reportfile')), 
           "command line doesn't match expected output");

  };
